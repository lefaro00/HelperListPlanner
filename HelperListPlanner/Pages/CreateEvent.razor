@using BackendLogic.Data.Entities;
@using BackendLogic.Data.Services;
@using BackendLogic.Data.ValueObjects;
@using HelperListPlanner.Models;
@inject CalendarService calendarService
@inject PersonService personService


<h3>CreateEvent</h3>

<EditForm Model="@createEventModel" OnValidSubmit="@HandleSubmit">
    <p>
        <label>
            Event Name:
            <InputText @bind-Value="createEventModel.EventName"></InputText>
         </label>
    </p>
    <p>
        <label>
            Event Description:
            <InputTextArea @bind-Value="createEventModel.Description"></InputTextArea>
        </label>
    </p>
    <p>
        <label>
            Select Host
            <p>
                <InputSelect @bind-Value="createEventModel._Host">
                @foreach(BackendLogic.Data.Entities.Host _host in hosts)
                {
                    <option value="@_host">@_host.Name</option>
                }
            </InputSelect>
            </p>
        </label>
    </p>
    <p>
        <label>
            <p>Create shifts: Not yet in frontend implemented</p>
            <p>Demo: Hardcoded shifts</p>
            @foreach(var shift in shifts){
                <p>@shift.ToString();</p>
            }
        </label>
    </p>
    <p>
        <label>
            Select Start Time:
            <p>Demo: Hardcoded st: @EventStartTime.ToString()</p>
        </label>
        <label>
            Select End Time:
            <p>
                Demo: Hartdcoded et: @EventEndTime.ToString()
            </p>
        </label>
        <label>
            Select Location:
            <p>Demo: Hardcoded Location: @location.ToString()</p>
        </label>
    </p>
    <button type="submit">Erstellen</button>

</EditForm>



@code {
    private CreateEventModel createEventModel = new();



    private List<BackendLogic.Data.Entities.Host> hosts { get; set; } = new List<BackendLogic.Data.Entities.Host>();
    private List<Shift> shifts = CreateShifts();
    private static Accountable accountable = new Accountable("Melevan", "Schwarz", "11223344", "irgendwas@stuv-karlsruhe.de");
    private DateTime EventStartTime = new DateTime(2023, 1, 20, 12, 30, 0);
    private DateTime EventEndTime = new DateTime(2023, 1, 20, 16, 30, 0);
    private Location location = new Location(accountable, "DH-Karlsruhe", "Erzensbergerstraße", "121", "Karlsruhe", 450);

    protected override async void OnInitialized()
    { 
        var tempHosts = await calendarService.GetHosts();
        hosts.Add(await personService.CreateHost("StuV", accountable));
        hosts.AddRange(tempHosts);
        base.OnInitialized();
    }

    private void HandleSubmit()
    {
        Console.WriteLine("submit");
        Event @event = new Event(createEventModel.EventName, createEventModel._Host, createEventModel.Description, EventStartTime, EventEndTime, shifts, location);
        calendarService.ScheduleEvent(@event);
        
        createEventModel = new();
    }

    private static List<Shift> CreateShifts()
    {
        return new List<Shift> {
            new Shift("Grill", 2, new ShiftType("Grill","Würste braten"), new DateTime(2023, 1, 20, 12, 30, 0), new DateTime(2023, 1, 20, 14, 30, 0)),
            new Shift("Grill", 2, new ShiftType("Grill","Würste braten"), new DateTime(2023, 1, 20, 14, 30, 0), new DateTime(2023, 1, 20, 16, 30, 0)),
            new Shift("Cocktail Bar", 2, new ShiftType("Bar","Cocktails mixen"), new DateTime(2023, 1, 20, 12, 30, 0), new DateTime(2023, 1, 20, 14, 30, 0)),
            new Shift("Bier Bar", 2, new ShiftType("Bar","Bier ausgeben"), new DateTime(2023, 1, 20, 12, 30, 0), new DateTime(2023, 1, 20, 14, 30, 0))
        };
    }

}

